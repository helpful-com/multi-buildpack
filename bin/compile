#!/usr/bin/env bash
# Helpful multi-build pack.
# Note that this was originally sourced from: https://github.com/ddollar/heroku-buildpack-multi

[ $VERBOSE ] && set -x
set -e

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

unset GIT_DIR

echo "-----> Compiling Multi-Pack buildpack"

ln -s /tmp/ /tmp/staged 2>/dev/null || true

__project_home=$1
__service_buildpacks=""
__service_buildpack_file=${__project_home}/ci/hooks/cf-build-packs
if [[ -f $__service_buildpack_file ]]; then
    echo "Found service buildpack files at: $__service_buildpack_file" | indent
    declare -a __service_buildpacks = (`cat $__service_buildpack_file | grep -v ^#`)
    for buildpack in "${__service_buildpacks[@]}"; do
	echo "Buildpack found: $buildpack" | indent
    done
else
    echo "No service buildpacks found! Exiting..."
    exit 1
fi


for _buildpack in "${__service_buildpacks[@]})"; do
  dir="$(mktemp -d -t buildpackXXXXX)"

  url=${_buildpack%#*}
  branch=${_buildpack#*#}

  if [ "$branch" == "$url" ]; then
    branch=""
  fi

  if [ "$url" != "" ]; then
    echo "=====> Downloading Buildpack: $url"

    if [[ "$url" =~ \.tgz$ ]]; then
      curl -s "$url" | tar xvz -C "$dir" >/dev/null 2>&1
    else
      git clone $url $dir >/dev/null 2>&1
      if [ -f "$dir/.gitmodules" ]; then
        echo "=====> Detected git submodules. Initializing..."
        (cd $dir && git submodule update --init --recursive)
      fi
    fi
    cd $dir

    if [ "$branch" != "" ]; then
      git checkout $branch >/dev/null 2>&1
    fi

    # we'll get errors later if these are needed and don't exist
    chmod -f +x $dir/bin/{detect,compile,release} || true

    framework=$($dir/bin/detect $1)

    if [ $? == 0 ]; then
      echo "=====> Detected Framework: $framework"
      $dir/bin/compile $1 $2 $3

      if [ $? != 0 ]; then
        exit 1
      fi

      # check if the buildpack left behind an environment for subsequent ones
      if [ -e $dir/export ]; then
        source $dir/export
      fi

      if [ -x $dir/bin/release ]; then
        $dir/bin/release $1 > $1/current_pack_release.out
        mv $1/current_pack_release.out $1/last_pack_release.out
      fi
    fi
  fi
done

if [ -e $1/last_pack_release.out ]; then
  echo "Using release configuration from last framework ($framework)."
fi